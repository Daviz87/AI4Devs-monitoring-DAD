name: Backend CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened] # Se activa en PRs abiertos/actualizados hacia cualquier rama

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }} # URL de la BD para pruebas (ej. postgresql://postgres:postgres@localhost:5432/test_db)
      # Añade otras variables de entorno necesarias para las pruebas aquí
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Basado en el análisis previo, el proyecto usa Node.js. Ajusta si es necesario.
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Run Prisma Generate (if used in tests)
        working-directory: ./backend
        run: npx prisma generate # Si tus tests o configuración de BD lo requieren

      - name: Run Prisma Migrate (for test DB, if applicable)
        working-directory: ./backend
        run: npx prisma migrate dev --name init # O el comando de migración adecuado para tu entorno de prueba
        # Este paso asume que quieres aplicar migraciones a la BD de prueba.
        # Puede que necesites un esquema limpio o datos semilla, ajusta según tus necesidades.

      - name: Run backend tests
        working-directory: ./backend
        run: npm test # Comando de prueba del backend identificado en el análisis previo

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: backend-tests # Depende del éxito del job de pruebas
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Build backend application
        working-directory: ./backend
        run: npm run build # Comando de build del backend identificado

      - name: Archive backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: ./backend/dist/ # Directorio de salida del build del backend
          if-no-files-found: error # Falla si no se encuentran artefactos

      - name: Create backend.zip for EC2 deployment
        run: |
          echo "Creando backend.zip..."
          # Copiamos package.json, prisma y dist al directorio temporal para el zip
          mkdir -p deploy_package/backend/prisma
          cp backend/package.json deploy_package/backend/
          cp backend/package-lock.json deploy_package/backend/
          cp -r backend/prisma/* deploy_package/backend/prisma/
          cp -r backend/dist deploy_package/backend/
          if [ -f backend/Dockerfile ]; then
            cp backend/Dockerfile deploy_package/backend/
          else
            echo "ADVERTENCIA: backend/Dockerfile no encontrado. El script user_data en EC2 espera este archivo."
          fi
          # El script generar-zip.sh original zipea todo el directorio backend.
          # Para EC2, user_data.sh espera un backend.zip con la estructura necesaria para 'docker build'.
          # El user_data.sh actual hace 'cd /home/ec2-user/backend' y luego 'docker build'.
          # Por lo tanto, el zip debe contener los fuentes (o compilados) y el Dockerfile en su raíz.
          # El build de CI ya compila a 'dist', así que el zip debería incluir 'dist', 'prisma', 'package.json', y 'Dockerfile'.
          cd deploy_package
          zip -r ../backend.zip ./backend
          cd ..
          echo "backend.zip creado."
        # Este paso replica la estructura que el user_data.sh esperaría para construir la imagen Docker en EC2.
        # Si tu Dockerfile en `backend/` copia desde `dist/`, entonces solo necesitas `dist/`, `prisma/`, `package.json` y el `Dockerfile` en el zip.

      - name: Upload backend.zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-zip
          path: ./backend.zip
          if-no-files-found: error

  deploy-backend-s3:
    name: Deploy Backend to S3 (for EC2)
    runs-on: ubuntu-latest
    needs: backend-build # Depende del éxito del job de build
    environment: # Opcional: Define un entorno en GitHub si tienes reglas de protección/secretos específicos
      name: development 
      # url: ${{ steps.get_ec2_ip.outputs.ip_address }} # Si obtienes la IP y quieres mostrarla
    permissions: # Necesario para configurar OIDC con AWS
      id-token: write
      contents: read
    steps:
      - name: Download backend.zip artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-zip
          path: ./

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }} # ARN del Rol IAM para GitHub Actions
          aws-region: ${{ secrets.AWS_REGION }} # Ej: us-east-1

      - name: Upload backend.zip to S3
        run: |
          aws s3 cp backend.zip s3://${{ secrets.S3_BUCKET_NAME }}/backend.zip
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }} # Nombre del bucket S3 (ej: ai4devs-project-code-bucket)

      # Paso para obtener la IP de la instancia EC2 del backend (asumiendo que tiene un tag único)
      # Necesitarás ajustar el tag y el valor según tu configuración.
      - name: Get Backend EC2 Instance ID
        id: get_ec2_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=lti-project-backend" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "Error: No se pudo encontrar la instancia EC2 del backend en ejecución con el tag Name=lti-project-backend."
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "ID de instancia EC2 Backend: $INSTANCE_ID"

      - name: Trigger EC2 Redeployment (Restart Backend Application)
        uses: aws-actions/aws-ssm-send-command@v1
        with:
          instance-ids: ${{ env.INSTANCE_ID }}
          comment: 'Restarting backend service after new deployment'
          command: |
            #!/bin/bash
            # Navegar al directorio de la aplicación
            cd /home/ec2-user/
            
            echo "Deteniendo y eliminando contenedor Docker lti-backend si existe..."
            if sudo docker ps -a --format '{{.Names}}' | grep -q '^lti-backend$'; then
              sudo docker stop lti-backend
              sudo docker rm lti-backend
            else
              echo "Contenedor lti-backend no encontrado, omitiendo stop/rm."
            fi

            echo "Eliminando imagen Docker lti-backend si existe..."
            if sudo docker images -q lti-backend | grep -q .; then
              sudo docker rmi lti-backend
            else
              echo "Imagen lti-backend no encontrada, omitiendo rmi."
            fi
            
            echo "Limpiando directorio backend anterior si existe..."
            if [ -d "/home/ec2-user/backend" ]; then
              sudo rm -rf /home/ec2-user/backend
            fi
            
            echo "Descargando nuevo backend.zip desde S3..."
            aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/backend.zip /home/ec2-user/backend.zip
            
            echo "Descomprimiendo backend.zip..."
            unzip -o /home/ec2-user/backend.zip -d /home/ec2-user/ # -o para sobrescribir sin preguntar
            
            cd /home/ec2-user/backend
            echo "Construyendo nueva imagen Docker lti-backend..."
            if [ -f Dockerfile ]; then
              sudo docker build -t lti-backend .
              echo "Ejecutando nuevo contenedor lti-backend..."
              sudo docker run -d -p 8080:8080 --name lti-backend lti-backend
              echo "Aplicación backend reiniciada."
            else
              echo "ERROR: Dockerfile no encontrado en /home/ec2-user/backend. No se puede reconstruir ni ejecutar la aplicación."
              exit 1
            fi
